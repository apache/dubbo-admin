// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// AuthorizationPolicyConditionApplyConfiguration represents an declarative configuration of the AuthorizationPolicyCondition type for use
// with apply.
type AuthorizationPolicyConditionApplyConfiguration struct {
	Key       *string                                      `json:"key,omitempty"`
	Values    []AuthorizationPolicyMatchApplyConfiguration `json:"values,omitempty"`
	NotValues []AuthorizationPolicyMatchApplyConfiguration `json:"notValues,omitempty"`
}

// AuthorizationPolicyConditionApplyConfiguration constructs an declarative configuration of the AuthorizationPolicyCondition type for use with
// apply.
func AuthorizationPolicyCondition() *AuthorizationPolicyConditionApplyConfiguration {
	return &AuthorizationPolicyConditionApplyConfiguration{}
}

// WithKey sets the Key field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Key field is set to the value of the last call.
func (b *AuthorizationPolicyConditionApplyConfiguration) WithKey(value string) *AuthorizationPolicyConditionApplyConfiguration {
	b.Key = &value
	return b
}

// WithValues adds the given value to the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Values field.
func (b *AuthorizationPolicyConditionApplyConfiguration) WithValues(values ...*AuthorizationPolicyMatchApplyConfiguration) *AuthorizationPolicyConditionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithValues")
		}
		b.Values = append(b.Values, *values[i])
	}
	return b
}

// WithNotValues adds the given value to the NotValues field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NotValues field.
func (b *AuthorizationPolicyConditionApplyConfiguration) WithNotValues(values ...*AuthorizationPolicyMatchApplyConfiguration) *AuthorizationPolicyConditionApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNotValues")
		}
		b.NotValues = append(b.NotValues, *values[i])
	}
	return b
}
