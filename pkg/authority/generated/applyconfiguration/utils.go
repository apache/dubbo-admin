// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	"github.com/apache/dubbo-admin/pkg/authority/apis/dubbo.apache.org/v1beta1"
	v1beta12 "github.com/apache/dubbo-admin/pkg/authority/generated/applyconfiguration/dubbo.apache.org/v1beta1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=dubbo.apache.org, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithKind("AuthenticationPolicy"):
		return &v1beta12.AuthenticationPolicyApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthenticationPolicyExtend"):
		return &v1beta12.AuthenticationPolicyExtendApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthenticationPolicyRule"):
		return &v1beta12.AuthenticationPolicyRuleApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthenticationPolicySource"):
		return &v1beta12.AuthenticationPolicySourceApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthenticationPolicySpec"):
		return &v1beta12.AuthenticationPolicySpecApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthenticationPolicyTarget"):
		return &v1beta12.AuthenticationPolicyTargetApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicy"):
		return &v1beta12.AuthorizationPolicyApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicyCondition"):
		return &v1beta12.AuthorizationPolicyConditionApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicyExtend"):
		return &v1beta12.AuthorizationPolicyExtendApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicyMatch"):
		return &v1beta12.AuthorizationPolicyMatchApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicyRule"):
		return &v1beta12.AuthorizationPolicyRuleApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicySource"):
		return &v1beta12.AuthorizationPolicySourceApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicySpec"):
		return &v1beta12.AuthorizationPolicySpecApplyConfiguration{}
	case v1beta1.SchemeGroupVersion.WithKind("AuthorizationPolicyTarget"):
		return &v1beta12.AuthorizationPolicyTargetApplyConfiguration{}

	}
	return nil
}
