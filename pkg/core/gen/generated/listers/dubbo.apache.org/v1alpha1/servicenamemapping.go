/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/apache/dubbo-admin/pkg/core/gen/apis/dubbo.apache.org/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceNameMappingLister helps list ServiceNameMappings.
// All objects returned here must be treated as read-only.
type ServiceNameMappingLister interface {
	// List lists all ServiceNameMappings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceNameMapping, err error)
	// ServiceNameMappings returns an object that can list and get ServiceNameMappings.
	ServiceNameMappings(namespace string) ServiceNameMappingNamespaceLister
	ServiceNameMappingListerExpansion
}

// serviceNameMappingLister implements the ServiceNameMappingLister interface.
type serviceNameMappingLister struct {
	indexer cache.Indexer
}

// NewServiceNameMappingLister returns a new ServiceNameMappingLister.
func NewServiceNameMappingLister(indexer cache.Indexer) ServiceNameMappingLister {
	return &serviceNameMappingLister{indexer: indexer}
}

// List lists all ServiceNameMappings in the indexer.
func (s *serviceNameMappingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceNameMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceNameMapping))
	})
	return ret, err
}

// ServiceNameMappings returns an object that can list and get ServiceNameMappings.
func (s *serviceNameMappingLister) ServiceNameMappings(namespace string) ServiceNameMappingNamespaceLister {
	return serviceNameMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceNameMappingNamespaceLister helps list and get ServiceNameMappings.
// All objects returned here must be treated as read-only.
type ServiceNameMappingNamespaceLister interface {
	// List lists all ServiceNameMappings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceNameMapping, err error)
	// Get retrieves the ServiceNameMapping from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceNameMapping, error)
	ServiceNameMappingNamespaceListerExpansion
}

// serviceNameMappingNamespaceLister implements the ServiceNameMappingNamespaceLister
// interface.
type serviceNameMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceNameMappings in the indexer for a given namespace.
func (s serviceNameMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceNameMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceNameMapping))
	})
	return ret, err
}

// Get retrieves the ServiceNameMapping from the indexer for a given namespace and name.
func (s serviceNameMappingNamespaceLister) Get(name string) (*v1alpha1.ServiceNameMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicenamemapping"), name)
	}
	return obj.(*v1alpha1.ServiceNameMapping), nil
}
