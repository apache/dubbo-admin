// Code generated by MockGen. DO NOT EDIT.
// Source: governance_config.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	reflect "reflect"

	common "dubbo.apache.org/dubbo-go/v3/common"
	gomock "github.com/golang/mock/gomock"
)

// MockGovernanceConfig is a mock of GovernanceConfig interface.
type MockGovernanceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockGovernanceConfigMockRecorder
}

// MockGovernanceConfigMockRecorder is the mock recorder for MockGovernanceConfig.
type MockGovernanceConfigMockRecorder struct {
	mock *MockGovernanceConfig
}

// NewMockGovernanceConfig creates a new mock instance.
func NewMockGovernanceConfig(ctrl *gomock.Controller) *MockGovernanceConfig {
	mock := &MockGovernanceConfig{ctrl: ctrl}
	mock.recorder = &MockGovernanceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGovernanceConfig) EXPECT() *MockGovernanceConfigMockRecorder {
	return m.recorder
}

// DeleteConfig mocks base method.
func (m *MockGovernanceConfig) DeleteConfig(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockGovernanceConfigMockRecorder) DeleteConfig(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockGovernanceConfig)(nil).DeleteConfig), key)
}

// DeleteConfigWithGroup mocks base method.
func (m *MockGovernanceConfig) DeleteConfigWithGroup(group, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigWithGroup", group, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfigWithGroup indicates an expected call of DeleteConfigWithGroup.
func (mr *MockGovernanceConfigMockRecorder) DeleteConfigWithGroup(group, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigWithGroup", reflect.TypeOf((*MockGovernanceConfig)(nil).DeleteConfigWithGroup), group, key)
}

// GetConfig mocks base method.
func (m *MockGovernanceConfig) GetConfig(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockGovernanceConfigMockRecorder) GetConfig(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockGovernanceConfig)(nil).GetConfig), key)
}

// GetConfigWithGroup mocks base method.
func (m *MockGovernanceConfig) GetConfigWithGroup(group, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigWithGroup", group, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigWithGroup indicates an expected call of GetConfigWithGroup.
func (mr *MockGovernanceConfigMockRecorder) GetConfigWithGroup(group, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigWithGroup", reflect.TypeOf((*MockGovernanceConfig)(nil).GetConfigWithGroup), group, key)
}

// GetList mocks base method.
func (m *MockGovernanceConfig) GetList(group string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", group)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockGovernanceConfigMockRecorder) GetList(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockGovernanceConfig)(nil).GetList), group)
}

// Register mocks base method.
func (m *MockGovernanceConfig) Register(url *common.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockGovernanceConfigMockRecorder) Register(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockGovernanceConfig)(nil).Register), url)
}

// SetConfig mocks base method.
func (m *MockGovernanceConfig) SetConfig(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockGovernanceConfigMockRecorder) SetConfig(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockGovernanceConfig)(nil).SetConfig), key, value)
}

// SetConfigWithGroup mocks base method.
func (m *MockGovernanceConfig) SetConfigWithGroup(group, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigWithGroup", group, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigWithGroup indicates an expected call of SetConfigWithGroup.
func (mr *MockGovernanceConfigMockRecorder) SetConfigWithGroup(group, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigWithGroup", reflect.TypeOf((*MockGovernanceConfig)(nil).SetConfigWithGroup), group, key, value)
}

// UnRegister mocks base method.
func (m *MockGovernanceConfig) UnRegister(url *common.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnRegister", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnRegister indicates an expected call of UnRegister.
func (mr *MockGovernanceConfigMockRecorder) UnRegister(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegister", reflect.TypeOf((*MockGovernanceConfig)(nil).UnRegister), url)
}
