// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: snp.proto

package mesh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceNameMappingServiceClient is the client API for ServiceNameMappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceNameMappingServiceClient interface {
	RegisterServiceAppMapping(ctx context.Context, in *ServiceMappingRequest, opts ...grpc.CallOption) (*ServiceMappingResponse, error)
}

type serviceNameMappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceNameMappingServiceClient(cc grpc.ClientConnInterface) ServiceNameMappingServiceClient {
	return &serviceNameMappingServiceClient{cc}
}

func (c *serviceNameMappingServiceClient) RegisterServiceAppMapping(ctx context.Context, in *ServiceMappingRequest, opts ...grpc.CallOption) (*ServiceMappingResponse, error) {
	out := new(ServiceMappingResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.ServiceNameMappingService/registerServiceAppMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceNameMappingServiceServer is the server API for ServiceNameMappingService service.
// All implementations must embed UnimplementedServiceNameMappingServiceServer
// for forward compatibility
type ServiceNameMappingServiceServer interface {
	RegisterServiceAppMapping(context.Context, *ServiceMappingRequest) (*ServiceMappingResponse, error)
	mustEmbedUnimplementedServiceNameMappingServiceServer()
}

// UnimplementedServiceNameMappingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceNameMappingServiceServer struct {
}

func (UnimplementedServiceNameMappingServiceServer) RegisterServiceAppMapping(context.Context, *ServiceMappingRequest) (*ServiceMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServiceAppMapping not implemented")
}
func (UnimplementedServiceNameMappingServiceServer) mustEmbedUnimplementedServiceNameMappingServiceServer() {
}

// UnsafeServiceNameMappingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceNameMappingServiceServer will
// result in compilation errors.
type UnsafeServiceNameMappingServiceServer interface {
	mustEmbedUnimplementedServiceNameMappingServiceServer()
}

func RegisterServiceNameMappingServiceServer(s grpc.ServiceRegistrar, srv ServiceNameMappingServiceServer) {
	s.RegisterService(&ServiceNameMappingService_ServiceDesc, srv)
}

func _ServiceNameMappingService_RegisterServiceAppMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceNameMappingServiceServer).RegisterServiceAppMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.ServiceNameMappingService/registerServiceAppMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceNameMappingServiceServer).RegisterServiceAppMapping(ctx, req.(*ServiceMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceNameMappingService_ServiceDesc is the grpc.ServiceDesc for ServiceNameMappingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceNameMappingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.ServiceNameMappingService",
	HandlerType: (*ServiceNameMappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerServiceAppMapping",
			Handler:    _ServiceNameMappingService_RegisterServiceAppMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snp.proto",
}
