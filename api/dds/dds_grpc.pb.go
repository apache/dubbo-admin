/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: dds.proto

package dds

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuleServiceClient is the client API for RuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleServiceClient interface {
	Observe(ctx context.Context, opts ...grpc.CallOption) (RuleService_ObserveClient, error)
}

type ruleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleServiceClient(cc grpc.ClientConnInterface) RuleServiceClient {
	return &ruleServiceClient{cc}
}

func (c *ruleServiceClient) Observe(ctx context.Context, opts ...grpc.CallOption) (RuleService_ObserveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuleService_ServiceDesc.Streams[0], "/org.apache.dubbo.auth.v1alpha1.RuleService/Observe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ruleServiceObserveClient{stream}
	return x, nil
}

type RuleService_ObserveClient interface {
	Send(*ObserveRequest) error
	Recv() (*ObserveResponse, error)
	grpc.ClientStream
}

type ruleServiceObserveClient struct {
	grpc.ClientStream
}

func (x *ruleServiceObserveClient) Send(m *ObserveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ruleServiceObserveClient) Recv() (*ObserveResponse, error) {
	m := new(ObserveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuleServiceServer is the server API for RuleService service.
// All implementations must embed UnimplementedRuleServiceServer
// for forward compatibility
type RuleServiceServer interface {
	Observe(RuleService_ObserveServer) error
	mustEmbedUnimplementedRuleServiceServer()
}

// UnimplementedRuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuleServiceServer struct {
}

func (UnimplementedRuleServiceServer) Observe(RuleService_ObserveServer) error {
	return status.Errorf(codes.Unimplemented, "method Observe not implemented")
}
func (UnimplementedRuleServiceServer) mustEmbedUnimplementedRuleServiceServer() {}

// UnsafeRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServiceServer will
// result in compilation errors.
type UnsafeRuleServiceServer interface {
	mustEmbedUnimplementedRuleServiceServer()
}

func RegisterRuleServiceServer(s grpc.ServiceRegistrar, srv RuleServiceServer) {
	s.RegisterService(&RuleService_ServiceDesc, srv)
}

func _RuleService_Observe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuleServiceServer).Observe(&ruleServiceObserveServer{stream})
}

type RuleService_ObserveServer interface {
	Send(*ObserveResponse) error
	Recv() (*ObserveRequest, error)
	grpc.ServerStream
}

type ruleServiceObserveServer struct {
	grpc.ServerStream
}

func (x *ruleServiceObserveServer) Send(m *ObserveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ruleServiceObserveServer) Recv() (*ObserveRequest, error) {
	m := new(ObserveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RuleService_ServiceDesc is the grpc.ServiceDesc for RuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.apache.dubbo.auth.v1alpha1.RuleService",
	HandlerType: (*RuleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Observe",
			Handler:       _RuleService_Observe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dds.proto",
}
