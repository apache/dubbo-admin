/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


syntax = "proto3";

package dubbo.apache.org.v1alpha1;

option java_multiple_files = true;

message ConditionRouteToClient {
  string key = 1;
  ConditionRoute spec = 2;
}

message DynamicConfigToClient {
  string key = 1;
  DynamicConfig spec = 2;
}

message TagRouteToClient {
  string key = 1;
  TagRoute spec = 2;
}

message ConditionRoute {
  int32 priority = 1;
  bool enabled = 2;
  bool force = 3;
  bool runtime = 4;
  string key = 5;
  string scope = 6;
  repeated string conditions = 7;
  string configVersion = 8;
}

message DynamicConfig {
  string key = 1;
  string scope = 2;
  string configVersion = 3;
  bool enabled = 4;
  repeated OverrideConfig configs = 5;
}

message OverrideConfig {
  string side = 1;
  repeated string addresses = 2;
  repeated string providerAddresses = 3;
  map<string, string> parameters = 4;
  repeated string applications = 5;
  repeated string services = 6;
  string type = 7;
  bool enabled = 8;
  ConditionMatch match = 9;
}

message ConditionMatch {
  AddressMatch address = 1;
  ListStringMatch service = 2;
  ListStringMatch application = 3;
  repeated ParamMatch param = 4;
}

message AddressMatch {
  string wildcard = 1;
  string cird = 2;
  string exact = 3;
}

message ListStringMatch {
  repeated StringMatch oneof = 1;
}

message StringMatch {
  string exact = 1;
  string prefix = 2;
  string regex = 3;
  string noempty = 4;
  string empty = 5;
  string wildcard = 6;
}

message ParamMatch {
  string key = 1;
  StringMatch value = 2;
}

message TagRoute {
  int32 priority = 1;
  bool enabled = 2;
  bool runtime = 3;
  string key = 4;
  string configVersion = 5;
  bool force = 6;
  repeated Tag tags = 7;
}

message Tag {
  string name = 1;
  repeated string addresses = 2;
  repeated ParamMatch match = 3;
}