global:
  # To help compatibility with other charts which use global.imagePullSecrets.
  # Allow either an array of {name: pullSecret} maps (k8s-style), or an array of strings (more common charts-style).
  # Can be tempalted.
  # global:
  #   imagePullSecrets:
  #   - name: pullSecret1
  #   - name: pullSecret2
  # or
  # global:
  #   imagePullSecrets:
  #   - pullSecret1
  #   - pullSecret2
  imagePullSecrets: []


fullnameOverride: {}


nameOverride: {}


namespaceOverride: {}


labels: {}


annotations: {}

volumes:
  name: application-properties


volumeMounts:
  mountPath: /config
  name: application-properties
  readOnly: true


rbac:
  create: true
  # Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
  pspEnabled: true
  pspUseAppArmor: true
  namespaced: false
  extraRoleRules: []
  useExistingRole: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []
  extraClusterRoleRules: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []

## serviceAccount
serviceAccount:
  create: true
  name:
  ## ServiceAccount labels.
  labels: {}
  annotations: {}


## Number of copies
replicas: 1

# -- Optional array of imagePullSecrets containing private registry credentials
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# - name: secretName


## Create a headless service for the deployment
headlessService: false


## Create HorizontalPodAutoscaler object for deployment type
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPU: "60"
  targetMemory: ""
  behavior: {}

## Number of old ReplicaSets to retain
##
revisionHistoryLimit: 10


## See `kubectl explain poddisruptionbudget.spec` for more
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget: {}
#  minAvailable: 1
#  maxUnavailable: 1


## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: RollingUpdate


readinessProbe:
  httpGet:
    path: /
    port: 8080
  initialDelaySeconds: 60
  timeoutSeconds: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3


livenessProbe:
  httpGet:
    path: /
    port: 8080
  initialDelaySeconds: 60
  timeoutSeconds: 30
  periodSeconds: 10
  successThreshold: 1
  failureThreshold: 3


image:
  repository: apache/dubbo-admin
  tag: "0.5.0"
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Can be templated.
  ##
  pullSecrets: []
  #   - RegisterKeySecretName


securityContext:
  # runAsUser: 570
  # runAsGroup: 570
  # fsGroup: 570

testFramework:
  enabled: true
  image: busybox
  tag: ""
  imagePullPolicy: IfNotPresent
  securityContext: {}


containerSecurityContext: {}


## Sensible environment variables that will be rendered as new secret object
## This can be useful for auth tokens, etc
envRenderSecret: {}

# -- `minReadySeconds` to avoid killing pods before we are ready
##
minReadySeconds: 0
# -- Node tolerations for server scheduling to nodes with taints
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
##


createConfigmap: true


ConfigmapMounts: []
  # - name: configMap-file
  #   mountPath: /config
  #   configMap: configMap-file
  #   readOnly: true


SecretMounts:
#  - name: secret-file
#    secret:
#      secretName: secret-file


##
extraSecretMounts: []
  # - name: secret-files
  #   mountPath: /etc/secrets
  #   secretName: secret-files
  #   readOnly: true
  #   subPath: ""


##
EmptyDirMounts: []
# - name: ""
#   mountPath: /


##
# Apply extra labels to common labels.
extraLabels: {}


## Assign a PriorityClassName to pods if set
# priorityClassName:


## Pod Annotations
# podAnnotations: {}


## Pod Labels
# podLabels: {}


## Expose the dubbo-admin service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  name: http
  ##
  ##
  ##
  enabled: true
  ##
  ##
  ##
  type: ClusterIP
  ##
  ##
  ##
  clusterIP: []
  ##
  ##
  ##
  loadBalancerIP: []
  ##
  ##
  ##
  loadBalancerSourceRanges: []
  ##
  ##
  ##
  externalIPs: []
  ##
  ##
  ##
  nodePort: []
  ##
  ##
  ##
  path: /
  ##
  ##
  ##
  port: 38080
  ##
  ##
  ##
  targetPort: http
  ##
  ##
  ##
  containerPort: 8080
  ##
  ##
  ##
  protocol: TCP
  ##
  ##
  ##
  ## Service annotations. Can be templated.
  annotations: {}
  labels: {}
  portName: service
  appProtocol: ""


ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  # Values can be templated
  annotations: {}
    # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  labels: {}
  path: /


  # pathType is only for k8s >= 1.1=
  pathType: Prefix


  hosts:
    - chart-example.local
  ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
  extraPaths: []
  # - path: /*
  #   backend:
  #     serviceName: ssl-redirect
  #     servicePort: use-annotation
  ## Or for k8s > 1.19
  # - path: /*
  #   pathType: Prefix
  #   backend:
  #     service:
  #       name: ssl-redirect
  #       port:
  #         name: use-annotation


  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment (evaluated as template)
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Topology Spread Constraints
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
##
topologySpreadConstraints: []

## Additional init containers (evaluated as template)
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
##
InitContainers: []


## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: false
  type: pvc
  # storageClassName: default
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  # annotations: {}
  finalizers:
    - kubernetes.io/pvc-protection
  # selectorLabels: {}
  ## Sub-directory of the PV to mount. Can be templated.
  # subPath: ""
  ## Name of an existing PVC. Can be templated.
  # existingClaim:
  ## Extra labels to apply to a PVC.
  extraPvcLabels: {}

  ## If persistence is not enabled, this allows to mount the
  ## local storage in-memory to improve performance
  ##
  inMemory:
    enabled: false
    ## The maximum usage on memory medium EmptyDir would be
    ## the minimum value between the SizeLimit specified
    ## here and the sum of memory limits of all containers in a pod
    ##
    # sizeLimit: 300Mi

initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the dubbo-admin-server to be run with an arbitrary user
  ##
  ##
  ##
  enabled: true
  ##
  ##
  ## initChownData container image
  ##
  ##
  image:
    repository: busybox
    tag: "1.31.1"
    sha: ""
    pullPolicy: IfNotPresent
  ##
  ##
  ##
  ##
  ## initChownData resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi
  securityContext:
    runAsNonRoot: false
    runAsUser: 0


## Container Lifecycle Hooks. Execute a specific bash command or make an HTTP request
lifecycleHooks: {}
  # postStart:
  #   exec:
#     command: []


networkPolicy:
  ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
  ##
  enabled: false
  ## @param networkPolicy.allowExternal Don't require client label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to  dubbo-admin port defined.
  ## When true, dubbo-admin will accept connections from any source
  ## (with the correct destination port).
  ##
  ingress: true
  ## @param networkPolicy.ingress When true enables the creation
  ## an ingress network policy
  ##
  allowExternal: true
  ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which traffic could be allowed
  ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
  ## and that match other criteria, the ones that have the good label, can reach the dubbo-admin.
  ## But sometimes, we want the dubbo-admin to be accessible to clients from other namespaces, in this case, we can use this
  ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
  ##
  ## Example:
  ## explicitNamespacesSelector:
  ##   matchLabels:
  ##     role: frontend
  ##   matchExpressions:
  ##    - {key: role, operator: In, values: [frontend]}
  ##
  explicitNamespacesSelector: {}
  ##
  ##
  ##
  ##
  ##
  ##
  egress:
    ## @param networkPolicy.egress.enabled When enabled, an egress network policy will be
    ## created allowing dubbo-admin to connect to external data sources from kubernetes cluster.
    enabled: false
    ##
    ## @param networkPolicy.egress.ports Add individual ports to be allowed by the egress
    ports: []
      ## Add ports to the egress by specifying - port: <port number>
      ## E.X.
      ## ports:
      ## - port: 80
      ## - port: 443

properties:
  admin.registry.address: zookeeper://zookeeper:2181
  admin.config-center: zookeeper://zookeeper:2181
  admin.metadata-report.address: zookeeper://zookeeper:2181
  admin.root.user.name: root
  admin.root.user.password: root
  admin.check.sessionTimeoutMilli: 3600000
  server.compression.enabled: true
  server.compression.mime-types: text/css,text/javascript,application/javascript
  server.compression.min-response-size: 10240
  admin.check.tokenTimeoutMilli: 3600000
  admin.check.signSecret: 86295dd0c4ef69a1036b0b0c15158d77
  dubbo.application.name: dubbo-admin
  dubbo.registry.address: ${admin.registry.address}
  spring.datasource.url: jdbc:h2:mem:~/dubbo-admin;MODE=MYSQL;
  spring.datasource.username: sa
  spring.datasource.password:
  mybatis-plus.global-config.db-config.id-type: none
  dubbo.application.logger: slf4j
  
  # nacos config, add parameters to url like username=nacos&password=nacos
  # admin.registry.address: nacos://127.0.0.1:8848?group=DEFAULT_GROUP&namespace=public
  # admin.config-center: nacos://127.0.0.1:8848?group=dubbo
  # admin.metadata-report.address: nacos://127.0.0.1:8848?group=dubbo
  
  
  # group (Deprecated it is recommended to use URL to add parameters,will be removed in the future)
  # admin.registry.group: dubbo
  # admin.config-center.group: dubbo
  # admin.metadata-report.group: dubbo
  
  # namespace used by nacos.(Deprecated it is recommended to use URL to add parameters,will be removed in the future)
  # admin.registry.namespace: public
  # admin.config-center.namespace: public
  # admin.metadata-report.namespace: public
  
  # apollo config
  # admin.config-center: apollo://localhost:8070?token=e16e5cd903fd0c97a116c873b448544b9d086de9&app.id=test&env=dev&cluster=default&namespace=dubbo
  # admin.apollo.token: e16e5cd903fd0c97a116c873b448544b9d086de9
  # admin.apollo.appId: test
  # admin.apollo.env: dev
  # admin.apollo.cluster: default
  
  # mysql
  # spring.datasource.driver-class-name: com.mysql.jdbc.Driver
  # spring.datasource.url: jdbc:mysql://localhost:3306/dubbo-admin?characterEncoding=utf8&connectTimeout=1000&socketTimeout=10000&autoReconnect=true
  # spring.datasource.username: root
  # spring.datasource.password: mysql